Java Features
>>> Java 8 <<<
- forEach() method in Iterable interface
- default and static methods in Interfaces
- Functional Interfaces and Lambda Expressions
- Java Stream API for Bulk Data Operations on Collections
N1: collectors

- Java Time API
It has always been hard to work with Date, Time and Time Zones in java. There was no standard approach or API in java for date and time in Java. One of the nice addition in Java 8 is the java.time package that will streamline the process of working with time in java.
Just by looking at Java Time API packages, I can sense that it will be very easy to use. It has some sub-packages java.time.format that provides classes to print and parse dates and times and java.time.zone provides support for time-zones and their rules.
The new Time API prefers enums over integer constants for months and days of the week. One of the useful class is DateTimeFormatter for converting DateTime objects to strings.

- Collection API improvements
Some new methods added in Collection API are:
Iterator default method forEachRemaining(Consumer action) to perform the given action for each remaining element until all elements have been processed or the action throws an exception.
Collection default method removeIf(Predicate filter) to remove all of the elements of this collection that satisfy the given predicate.
Collection spliterator() method returning Spliterator instance that can be used to traverse elements sequentially or parallel.
Map replaceAll(), compute(), merge() methods.
Performance Improvement for HashMap class with Key Collisions

- Concurrency API improvements
Some important concurrent API enhancements are:
ConcurrentHashMap compute(), forEach(), forEachEntry(), forEachKey(), forEachValue(), merge(), reduce() and search() methods.
CompletableFuture that may be explicitly completed (setting its value and status).
Executors newWorkStealingPool() method to create a work-stealing thread pool using all available processors as its target parallelism level.

- Java IO improvements
Files.list(Path dir) that returns a lazily populated Stream, the elements of which are the entries in the directory.
Files.lines(Path path) that reads all lines from a file as a Stream.
Files.find() that returns a Stream that is lazily populated with Path by searching for files in a file tree rooted at a given starting file.
BufferedReader.lines() that return a Stream, the elements of which are lines read from this BufferedReader.

- Miscellaneous Core API improvements
ThreadLocal static method withInitial(Supplier supplier) to create instance easily.
Comparator interface has been extended with a lot of default and static methods for natural ordering, reverse order etc.
min(), max() and sum() methods in Integer, Long and Double wrapper classes.
logicalAnd(), logicalOr() and logicalXor() methods in Boolean class.
ZipFile.stream() method to get an ordered Stream over the ZIP file entries. Entries appear in the Stream in the order they appear in the central directory of the ZIP file.
Several utility methods in Math class.
jjs command is added to invoke Nashorn Engine.
jdeps command is added to analyze class files
JDBC-ODBC Bridge has been removed.
PermGen memory space has been removed

>>> Java 9 <<<
Some of the important java 9 features are;
- Java 9 REPL (JShell)

- Factory Methods for Immutable List, Set, Map and Map.Entry
Empty List Example
List immutableList = List.of();
Non-Empty List Example
List immutableList = List.of("one","two","three");

Empty Map Example
Map emptyImmutableMap = Map.of()
Non-Empty Map Example
Map nonemptyImmutableMap = Map.of(1, "one", 2, "two", 3, "three")

- Private methods in Interfaces

- Java 9 Module System

- Process API Improvements

- Try With Resources Improvement

- CompletableFuture API Improvements
In Java SE 9, Oracle Corp is going to improve CompletableFuture API to solve some problems raised in Java SE 8. They are going add to support some delays and timeouts, some utility methods and better sub-classing.
Executor exe = CompletableFuture.delayedExecutor(50L, TimeUnit.SECONDS);
Here delayedExecutor() is a static utility method used to return a new Executor that submits a task to the default executor after the given delay.

- Reactive Streams
https://www.journaldev.com/20723/java-9-reactive-streams
kind of "RxJava"

- Diamond Operator for Anonymous Inner Class
- Optional Class Improvements
- Stream API Improvements
- Enhanced @Deprecated annotation
- HTTP 2 Client
- Multi-Resolution Image API
- Miscellaneous Java 9 Features