plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.3'
	id 'io.spring.dependency-management' version '1.1.3'
	id("nebula.dependency-lock") version "12.7.1"
}

group = 'com.example.gradle'
version = '1.0.0'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	mavenLocal()
}

dependencyLocking {
	lockAllConfigurations()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

//	implementation project(path: ':module-a-v2.0')
	implementation 'com.example.tools.moduleversioning:module-a:2.0.0'
	implementation 'com.example.tools.moduleversioning:module-b:1.0.0'
}

tasks.named('test') {
	useJUnitPlatform()
}



tasks.register('resolveAndLockAll') {
	notCompatibleWithConfigurationCache("Filters configurations at execution time")
	doFirst {
		assert gradle.startParameter.writeDependencyLocks : "$path must be run from the command line with the `--write-locks` flag"
	}
	doLast {
		configurations.findAll {
			// Add any custom filtering on the configurations to be resolved
			it.canBeResolved
		}.each { it.resolve() }
	}
}
